//
// This file was generated by the JavaTM Architecture for XML Binding(JAXB) Reference Implementation, v2.2.4-2 
// See <a href="http://java.sun.com/xml/jaxb">http://java.sun.com/xml/jaxb</a> 
// Any modifications to this file will be lost upon recompilation of the source schema. 
// Generated on: 2015.01.14 at 09:56:57 AM CET 
//


package org.iaea._2012.irix.format.releaseinformation;

import javax.xml.bind.annotation.XmlEnum;
import javax.xml.bind.annotation.XmlEnumValue;
import javax.xml.bind.annotation.XmlType;


/**
 * <p>Java class for ReleaseRouteType.
 * 
 * <p>The following schema fragment specifies the expected content contained within this class.
 * <p>
 * <pre>
 * &lt;simpleType name="ReleaseRouteType">
 *   &lt;restriction base="{http://www.w3.org/2001/XMLSchema}token">
 *     &lt;enumeration value="Release from Containment"/>
 *     &lt;enumeration value="Containment By-pass under Dry Conditions"/>
 *     &lt;enumeration value="Containment By-pass under Wet Conditions"/>
 *     &lt;enumeration value="Release from Spent Fuel Pool"/>
 *   &lt;/restriction>
 * &lt;/simpleType>
 * </pre>
 * 
 */
@XmlType(name = "ReleaseRouteType")
@XmlEnum
public enum ReleaseRouteType {

    @XmlEnumValue("Release from Containment")
    RELEASE_FROM_CONTAINMENT("Release from Containment"),
    @XmlEnumValue("Containment By-pass under Dry Conditions")
    CONTAINMENT_BY_PASS_UNDER_DRY_CONDITIONS("Containment By-pass under Dry Conditions"),
    @XmlEnumValue("Containment By-pass under Wet Conditions")
    CONTAINMENT_BY_PASS_UNDER_WET_CONDITIONS("Containment By-pass under Wet Conditions"),
    @XmlEnumValue("Release from Spent Fuel Pool")
    RELEASE_FROM_SPENT_FUEL_POOL("Release from Spent Fuel Pool");
    private final String value;

    ReleaseRouteType(String v) {
        value = v;
    }

    public String value() {
        return value;
    }

    public static ReleaseRouteType fromValue(String v) {
        for (ReleaseRouteType c: ReleaseRouteType.values()) {
            if (c.value.equals(v)) {
                return c;
            }
        }
        throw new IllegalArgumentException(v);
    }

}
